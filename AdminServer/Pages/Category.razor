@page "/category"

@inject HttpClient httpClient

@if (Categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="bg-white p-8 rounded-md w-full">
		<EditForm Model="@Request" OnValidSubmit="@HandleValidSubmit" class="grid grid-cols-3 space-x-5 align-middle">
			<DataAnnotationsValidator />
			<ValidationSummary />
			<div class="flex justify-between align-middle space-x-5">
				<h1 >Danh mục cấp 1</h1>
				<InputSelect @bind-Value="@Request.ParentId" class="bg-gray-300 rounded-md border-1 border-gray-800 px-3 py-2 pr-2" >
				@foreach (var cate in Categories)
					{
						<option value="@cate.Id">@cate.Name</option>
					}
				</InputSelect>
			</div>
			<div class="w-auto">
				<InputText @bind-Value="@Request.Search" class="form-bl w-full" placeholder="Search..."></InputText>
			</div>
			<div>
				<button type="submit" class="btn bg-gray-300 text-gray-800 hover:bg-gray-800 hover:text-white">Submit</button>
				<a href="createcategory" class="btn bg-green-200 text-green-800 hover:bg-green-800 hover:text-white">Create</a>
			</div>
			
		</EditForm>
		@if(ChildCategories != null)
		{
			<div>
				<div class="-mx-4 sm:-mx-8 px-4 sm:px-8 py-4 overflow-x-auto">
					<div class="inline-block min-w-full shadow rounded-lg overflow-hidden">
						<table class="min-w-full leading-normal">
							<thead>
								<tr>
									<th
										class="tb-header">
										Id
									</th>
									<th
										class="tb-header">
										Name
									</th>
									<th
										class="tb-header">
										SortOrder
									</th>
									<th
										class="tb-header">
										IsHome
									</th>
									<th
										class="tb-header">
										Action
									</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var category in ChildCategories)
									{
										<tr>
											<td class="tb-line">
												<p class="text-gray-900 whitespace-no-wrap">@category.Id</p>
											</td>
											<td class="tb-line">
												<p class="text-gray-900 whitespace-no-wrap">@category.Name</p>
											</td>
											<td class="tb-line">
												<p class="text-gray-900 whitespace-no-wrap">@category.SortOrder</p>
											</td>
											<td class="tb-line">
												<p class="text-gray-900 whitespace-no-wrap">@category.IsHome</p>
											</td>
											<td class="tb-line">
												<a href="EditCategory" class="text-blue-800 font-semibold whitespace-no-wrap">Edit</a>
												<button @onclick="() =>Delete(category.Id)">Delete</button>
												
											</td>
										</tr>
									}
							</tbody>
						</table>
					</div>
				</div>
			</div>
		}
	</div>
}



@code {
    private IReadOnlyList<CategoryDto> Categories { get; set; }


	public CategoryRequestDto Request {set; get;}
	public IReadOnlyList<CategoryDto> ChildCategories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Categories = await httpClient.GetFromJsonAsync<IReadOnlyList<CategoryDto>>("category");
		Request = new CategoryRequestDto();
		await LoadCate();
	}
	
	private async Task HandleValidSubmit(EditContext context){
		await LoadCate();
	}

	public async Task Delete(int id){
		await httpClient.DeleteAsync("category/" + id);
		await LoadCate();
	}
	public async Task LoadCate (){
		ChildCategories = await httpClient.GetFromJsonAsync<IReadOnlyList<CategoryDto>>($"category?parentid={Request.ParentId}&search={Request.Search}");
		StateHasChanged();
	}

}